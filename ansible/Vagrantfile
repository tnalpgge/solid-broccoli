# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

plugin_errors = []

def missing_plugin_message(name)
  return "Vagrant plugin #{name} is not installed"
end

REQUIRED_PLUGINS = %w()
SUGGESTED_PLUGINS = %w(vagrant-sshfs landrush)

SUGGESTED_PLUGINS.each do |plugin| 
  unless Vagrant.has_plugin?(plugin)
    print("note: " + message(plugin) + "\n")
  end
end

REQUIRED_PLUGINS.each do |plugin|  
  unless Vagrant.has_plugin?(plugin)
    plugin_errors << missing_plugin_message(plugin)
  end
end

unless plugin_errors.empty?
  if plugin_errors.size > 1
    plugin_error_message = "Errors: \n* " + plugin_errors.join("\n* ")
  else
    plugin_error_message = "Error: " + plugin_errors.first
  end
  fail Vagrant::Errors::VagrantError.new, plugin_error_message
end

if Vagrant.has_plugin?('vagrant-sshfs')
  sync_type = 'sshfs'
else
  sync_type = 'rsync'
end

Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/centos-7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  if Vagrant.has_plugin?('landrush')
    config.landrush.enabled = true
    config.landrush.tld = 'navelint.com'
    # config.landrush.guest_redirect_dns = false
  end

  config.vm.hostname = 'illum00.' + config.landrush.tld
  config.hostmanager.aliases = %w(illum00)

  config.vm.network :private_network, type: "dhcp"
  config.vm.synced_folder "ansible", "/srv/ansible"
  config.vm.synced_folder "..", "/home/vagrant/sync", type: sync_type
  config.vm.synced_folder '.vagrant', '/home/vagrant/.hidden', type: sync_type

  config.vm.provider :virtualbox do |vb, override|
    vb.memory = 1024
    vb.cpus = 1
  end

  config.vm.provision :ansible_local do |ansible|
    ansible.verbose = true
    ansible.install = true
    ansible.provisioning_path = '/srv/ansible'
    ansible.playbook = 'install.yml'
    ansible.host_vars = {
      default: {
        ansible_connection: 'local',
      }
    }
  end

end
